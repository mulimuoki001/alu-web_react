(self.webpackChunktask_5=self.webpackChunktask_5||[]).push([[677],{677:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>tt,listNotificationsInitialState:()=>Ve});var r=n(294),o=n(697),i=n.n(o),a=n(521);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=l(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=l(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==l(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=r.memo((function(e){var t=e.type,n=e.value,o=e.html,i=e.markAsRead,l=e.id,c=(0,a.iv)("urgent"===t?p.urgent:p.default);return n?"noNotifications"===t?r.createElement("li",{className:(0,a.iv)(p.noNotifications),"data-notification-type":t},n):r.createElement("li",{className:c,"data-notification-type":t,onClick:function(){return i(l)}},n):r.createElement("li",{className:c,"data-notification-type":t,dangerouslySetInnerHTML:o,onClick:function(){return i(l)}})}));u.defaultProps={type:"default",value:"",html:{},markAsRead:function(){},id:NaN},u.propTypes={type:i().string,value:i().string,html:i().shape({__html:i().string}),markAsRead:i().func,id:i().number};var s="@media screen and (max-width: 900px)",f={listStyle:"none",borderBottom:"1px solid black",padding:"10px 8px",fontSize:"20px"},p=a.mM.create({default:c({color:"blue",":hover":{cursor:"pointer"}},s,f),urgent:c({color:"red",":hover":{cursor:"pointer"}},s,f),noNotifications:c({color:"black"},s,f)});const m=u,d=i().shape({id:i().number.isRequired,html:i().shape({__html:i().string}),type:i().string.isRequired,value:i().string}),y=n.p+"d358bb35dc011695b84ce67f9214c2bf.png";function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t,n){return(t=g(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,g(r.key),r)}}function g(e){var t=function(e,t){if("object"!=b(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=b(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==b(t)?t:t+""}function w(e,t){return(w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=E();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){if(t&&("object"==b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(E=function(){return!!e})()}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&w(e,t)}(i,e);var t,n,o=S(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this.props,t=e.displayDrawer,n=e.listNotifications,o=e.handleDisplayDrawer,i=e.handleHideDrawer,l=e.markNotificationAsRead,c=(0,a.iv)(t?k.menuItemPNoShow:k.menuItemPShow);return r.createElement(r.Fragment,null,r.createElement("div",{className:(0,a.iv)(k.menuItem),id:"menuItem",onClick:o},r.createElement("p",{className:c},"Your notifications")),t&&r.createElement("div",{className:(0,a.iv)(k.notifications),id:"Notifications"},r.createElement("button",{style:{background:"transparent",border:"none",position:"absolute",right:20},"aria-label":"close",onClick:i,id:"closeNotifications"},r.createElement("img",{src:y,alt:"close-icon",className:(0,a.iv)(k.notificationsButtonImage)})),r.createElement("p",{className:(0,a.iv)(k.notificationsP)},"Here is the list of notifications"),r.createElement("ul",{className:(0,a.iv)(k.notificationsUL)},0===n.length&&r.createElement(m,{type:"noNotifications",value:"No new notifications for now"}),n.map((function(e){return r.createElement(m,{key:e.id,id:e.id,type:e.type,value:e.value,html:e.html,markAsRead:l})})))))}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(r.PureComponent);x.defaultProps={displayDrawer:!1,listNotifications:[],handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){}},x.propTypes={displayDrawer:i().bool,listNotifications:i().arrayOf(d),handleDisplayDrawer:i().func,handleHideDrawer:i().func,markNotificationAsRead:i().func};var P="@media screen and (max-width: 900px)",C={"0%":{border:"3px dashed deepSkyBlue"},"100%":{border:"3px dashed ".concat("#e01d3f")}},k=a.mM.create({menuItem:{float:"right",backgroundColor:"#fff8f8",":hover":{cursor:"pointer",animationName:[{from:{opacity:.5},to:{opacity:1}},{"0%":{transform:"translateY(0)"},"50%":{transform:"translateY(-5px)"},"75%":{transform:"translateY(5px)"},"100%":{transform:"translateY(0)"}}],animationDuration:"1s, 0.5s",animationIterationCount:3}},menuItemPNoShow:{marginRight:"8px",display:"none"},menuItemPShow:{marginRight:"8px"},notifications:h({float:"right",padding:"10px",marginBottom:"20px",animationName:[C],animationDuration:"0.8s",animationIterationCount:1,animationFillMode:"forwards",":hover":{border:"3px dashed deepSkyBlue"}},P,{float:"none",border:"none",listStyle:"none",padding:0,fontSize:"20px",":hover":{border:"none"},position:"absolute",background:"white",height:"110vh",width:"100vw",zIndex:10}),notificationsButtonImage:{width:"10px"},notificationsP:{margin:0,marginTop:"15px"},notificationsUL:h({},P,{padding:0})});const N=x,_=n.p+"24bab5d633e36ca8d17edc63164cf934.jpg";var T={email:"",password:"",isLoggedIn:!1};const D=r.createContext({user:T,logOut:function(){}});function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,L(r.key),r)}}function L(e){var t=function(e,t){if("object"!=R(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=R(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==R(t)?t:t+""}function B(e,t){return(B=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function A(e){var t=M();return function(){var n,r=F(e);if(t){var o=F(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return H(this,n)}}function H(e,t){if(t&&("object"==R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(M=function(){return!!e})()}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&B(e,t)}(i,e);var t,n,o=A(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this.context,t=e.user,n=e.logOut;return r.createElement("div",{className:(0,a.iv)(K.header)},r.createElement("img",{src:_,className:(0,a.iv)(K.headerImg)}),r.createElement("h1",null,"School dashboard"),t.isLoggedIn&&r.createElement("p",{id:"logoutSection",className:(0,a.iv)(K.logoutSection)},"Welcome ",r.createElement("b",null,"".concat(t.email," ")),r.createElement("span",{onClick:n,className:(0,a.iv)(K.logoutSectionSpan)},"(logout)")))}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(r.Component),K=a.mM.create({header:{display:"flex",alignItems:"center",color:"#e01d3f",fontSize:"20px"},headerImg:{width:"200px"},logoutSection:{color:"black",position:"absolute",right:0,paddingRight:"20px",alignSelf:"flex-end"},logoutSectionSpan:{fontStyle:"italic",cursor:"pointer"}});z.contextType=D;const W=z;function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,q(r.key),r)}}function q(e){var t=function(e,t){if("object"!=Y(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=Y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==Y(t)?t:t+""}function G(e,t){return(G=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function $(e){var t=Q();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return J(this,n)}}function J(e,t){if(t&&("object"==Y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Q(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Q=function(){return!!e})()}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&G(e,t)}(i,e);var t,n,o=$(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title;return r.createElement("div",{className:(0,a.iv)(ne.bodySection)},r.createElement("h2",{className:(0,a.iv)(ne.bodySectionH2)},n),t)}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),i}(r.Component);X.defaultProps={title:""},X.propTypes={title:i().string};var Z,ee,te,ne=a.mM.create({bodySection:(Z={display:"flex",flexWrap:"wrap",width:"100%"},ee="@media screen and (max-width: 900px)",te={boxSizing:"border-box",paddingLeft:"50px",paddingRight:"50px",paddingBottom:"20px"},(ee=q(ee))in Z?Object.defineProperty(Z,ee,{value:te,enumerable:!0,configurable:!0,writable:!0}):Z[ee]=te,Z),bodySectionH2:{width:"100%"}});const re=X;function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ae(r.key),r)}}function ae(e){var t=function(e,t){if("object"!=oe(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=oe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==oe(t)?t:t+""}function le(e,t){return(le=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function ce(e){var t=se();return function(){var n,r=fe(e);if(t){var o=fe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ue(this,n)}}function ue(e,t){if(t&&("object"==oe(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function se(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(se=function(){return!!e})()}function fe(e){return(fe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&le(e,t)}(n,e);var t=ce(n);function n(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,e)}return function(e,t,n){t&&ie(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(n,[{key:"render",value:function(){return r.createElement("div",{className:(0,a.iv)(me.bodySectionWithMargin)},r.createElement(re,this.props))}}]),n}(r.Component);pe.defaultProps={title:""},pe.propTypes={title:i().string};var me=a.mM.create({bodySectionWithMargin:function(e,t,n){return(t=ae(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({marginBottom:"40px",width:"100%"},"@media screen and (max-width: 900px)",{marginBottom:"10px"})});const de=pe;function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e,t,n){return(t=ve(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ve(r.key),r)}}function ve(e){var t=function(e,t){if("object"!=ye(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=ye(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==ye(t)?t:t+""}function ge(e,t){return(ge=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function we(e){var t=Ee();return function(){var n,r=je(e);if(t){var o=je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Se(this,n)}}function Se(e,t){if(t&&("object"==ye(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Oe(e)}function Oe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ee(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ee=function(){return!!e})()}function je(e){return(je=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var xe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ge(e,t)}(n,e);var t=we(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(r=t.call(this,e)).state={email:"",password:"",enableSubmit:!1},r.handleLoginSubmit=r.handleLoginSubmit.bind(Oe(r)),r.handleChangeEmail=r.handleChangeEmail.bind(Oe(r)),r.handleChangePassword=r.handleChangePassword.bind(Oe(r)),r}return function(e,t,n){t&&he(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(n,[{key:"handleLoginSubmit",value:function(e){e.preventDefault();var t=this.state,n=t.email,r=t.password;this.props.logIn(n,r)}},{key:"handleChangeEmail",value:function(e){var t=e.target.value,n=this.state.password;""!==t&&""!==n?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({email:e.target.value})}},{key:"handleChangePassword",value:function(e){var t=e.target.value;""!==this.state.email&&""!==t?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({password:e.target.value})}},{key:"render",value:function(){return r.createElement("div",{className:(0,a.iv)(Ce.login)},r.createElement("p",null,"Login to access the full dashboard"),r.createElement("form",{action:"",onSubmit:this.handleLoginSubmit},r.createElement("label",{htmlFor:"email"},"Email:"),r.createElement("input",{type:"email",id:"email",name:"email",className:(0,a.iv)(Ce.loginInput),value:this.state.email,onChange:this.handleChangeEmail}),r.createElement("label",{htmlFor:"password"},"Password:"),r.createElement("input",{type:"password",id:"password",name:"password",className:(0,a.iv)(Ce.loginInput),value:this.state.password,onChange:this.handleChangePassword}),r.createElement("input",{type:"submit",disabled:!this.state.enableSubmit})))}}]),n}(r.Component),Pe="@media screen and (max-width: 900px)",Ce=a.mM.create({login:be({margin:"50px",flexGrow:1},Pe,{marginTop:"10px",marginLeft:0,marginRight:0,marginBottom:0}),loginInput:be({marginLeft:"10px",marginRight:"20px"},Pe,{display:"block",marginLeft:0,marginTop:"10px",marginBottom:"10px"})});const ke=xe;function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var _e={backgroundColor:"#f5f5f5ab"},Te={backgroundColor:"#deb5b545"};function De(e){var t,n,o=e.isHeader,i=e.textFirstCell,l=e.textSecondCell,c=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],c=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ne(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,r.useState)(!1),2),u=c[0],s=c[1],f=(0,a.iv)(o?Ie.CourseListTh:Ie.CourseListTd,u&&Ie.rowChecked);return!0===o?t=null===l?r.createElement("th",{colSpan:"2",className:(0,a.iv)(Ie.CourseListThSpan2)},i):r.createElement(r.Fragment,null,r.createElement("th",{className:f},i),r.createElement("th",{className:f},l)):!1===o&&(t=r.createElement(r.Fragment,null,r.createElement("td",{className:f},r.createElement("input",{type:"checkbox",onClick:function(){s(!u)}}),i),r.createElement("td",{className:f},l))),n=o?Te:_e,r.createElement("tr",{style:n},t)}De.defaultProps={isHeader:!1,textSecondCell:null},De.propTypes={isHeader:i().bool,textFirstCell:i().string.isRequired,textSecondCell:i().oneOfType([i().string,i().number])};var Re="rgb(170, 170, 170);",Ie=a.mM.create({CourseListTh:{borderTop:"1px solid ".concat(Re),borderBottom:"1px solid ".concat(Re),textAlign:"left",fontSize:"18px"},CourseListThSpan2:{textAlign:"center"},CourseListTd:{textAlign:"left"},rowChecked:{backgroundColor:"#e6e4e4"}});const Le=De,Be=i().shape({id:i().number,name:i().string,credit:i().number});function Ae(e){var t=e.listCourses;return r.createElement("table",{id:"CourseList",className:(0,a.iv)(He.list)},r.createElement("thead",null,r.createElement(Le,{textFirstCell:"Available courses",isHeader:!0}),r.createElement(Le,{textFirstCell:"Course name",textSecondCell:"Credit",isHeader:!0})),r.createElement("tbody",null,0===t.length&&r.createElement(Le,{textFirstCell:"No course available yet",isHeader:!1}),t.map((function(e){return r.createElement(Le,{key:e.id,textFirstCell:e.name,textSecondCell:e.credit,isHeader:!1})}))))}Ae.defaultProps={listCourses:[]},Ae.propTypes={listCourses:i().arrayOf(Be)};var He=a.mM.create({list:{border:"1px solid ".concat("rgb(170, 170, 170);"),borderCollapse:"collapse",width:"95%",margin:"40px auto 0 auto"}});const Me=Ae,Fe=function(){return r.createElement(D.Consumer,null,(function(e){return r.createElement("div",{className:"footer"},r.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","Holberton School"),e.user.isLoggedIn&&r.createElement("a",{href:"#"},"Contact us"))}))};function ze(e){return(ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,We(r.key),r)}}function We(e){var t=function(e,t){if("object"!=ze(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=ze(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==ze(t)?t:t+""}function Ye(e,t){return(Ye=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function Ue(e){var t=$e();return function(){var n,r=Je(e);if(t){var o=Je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return qe(this,n)}}function qe(e,t){if(t&&("object"==ze(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Ge(e)}function Ge(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $e(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return($e=function(){return!!e})()}function Je(e){return(Je=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Qe=[{id:1,name:"ES6",credit:60},{id:2,name:"Webpack",credit:20},{id:3,name:"React",credit:40}],Ve=[{id:1,type:"default",value:"New course available"},{id:2,type:"urgent",value:"New resume available"},{id:3,type:"urgent",html:{__html:"<strong>Urgent requirement</strong> - complete by EOD"}}];document.body.style.margin=0;var Xe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ye(e,t)}(n,e);var t=Ue(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(r=t.call(this,e)).handleKeyCombination=r.handleKeyCombination.bind(Ge(r)),r.handleDisplayDrawer=r.handleDisplayDrawer.bind(Ge(r)),r.handleHideDrawer=r.handleHideDrawer.bind(Ge(r)),r.logIn=r.logIn.bind(Ge(r)),r.logOut=r.logOut.bind(Ge(r)),r.markNotificationAsRead=r.markNotificationAsRead.bind(Ge(r)),r.state={displayDrawer:!1,user:T,logOut:r.logOut,listNotifications:Ve},r}return function(e,t,n){t&&Ke(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1})}(n,[{key:"handleKeyCombination",value:function(e){"h"===e.key&&e.ctrlKey&&(alert("Logging you out"),this.state.logOut())}},{key:"handleDisplayDrawer",value:function(){this.setState({displayDrawer:!0})}},{key:"handleHideDrawer",value:function(){this.setState({displayDrawer:!1})}},{key:"logIn",value:function(e,t){this.setState({user:{email:e,password:t,isLoggedIn:!0}})}},{key:"logOut",value:function(){this.setState({user:T})}},{key:"markNotificationAsRead",value:function(e){this.setState({listNotifications:this.state.listNotifications.filter((function(t){return t.id!==e}))})}},{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyCombination)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyCombination)}},{key:"render",value:function(){var e=this.state,t=e.user,n=e.user.isLoggedIn,o=e.logOut,i=e.displayDrawer,l=e.listNotifications,c={user:t,logOut:o};return r.createElement(D.Provider,{value:c},r.createElement(N,{listNotifications:l,displayDrawer:i,handleDisplayDrawer:this.handleDisplayDrawer,handleHideDrawer:this.handleHideDrawer,markNotificationAsRead:this.markNotificationAsRead}),r.createElement("div",{className:(0,a.iv)(et.container)},r.createElement("div",{className:(0,a.iv)(et.app)},r.createElement(W,null)),r.createElement("div",{className:(0,a.iv)(et.appBody)},n?r.createElement(de,{title:"Course list"},r.createElement(Me,{listCourses:Qe})):r.createElement(de,{title:"Log in to continue"},r.createElement(ke,{logIn:this.logIn}))),r.createElement(re,{title:"News from the School"},r.createElement("p",null,"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.")),r.createElement("div",{className:(0,a.iv)(et.footer)},r.createElement(Fe,null))))}}]),n}(r.Component);Xe.defaultProps={},Xe.propTypes={};var Ze="#e01d3f",et=a.mM.create({container:{width:"calc(100% - 16px)",marginLeft:"8px",marginRight:"8px"},app:{borderBottom:"3px solid ".concat(Ze)},appBody:{display:"flex",justifyContent:"center"},footer:function(e,t,n){return(t=We(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({borderTop:"3px solid ".concat(Ze),width:"100%",display:"flex",justifyContent:"center",textAlign:"center",position:"fixed",paddingBottom:"10px",bottom:0,fontStyle:"italic"},"@media screen and (max-width: 900px)",{position:"static"})});const tt=Xe}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25JdGVtLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbkl0ZW1TaGFwZS5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvYXNzZXRzL2Nsb3NlLWljb24ucG5nIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL2Fzc2V0cy9ob2xiZXJ0b25fbG9nby5qcGciLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0FwcC9BcHBDb250ZXh0LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9IZWFkZXIvSGVhZGVyLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvQm9keVNlY3Rpb24vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Mb2dpbi9Mb2dpbi5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvQ291cnNlTGlzdC9Db3Vyc2VMaXN0Um93LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZVNoYXBlLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZUxpc3QuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0Zvb3Rlci9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9BcHAvQXBwLmpzIl0sIm5hbWVzIjpbIk5vdGlmaWNhdGlvbkl0ZW0iLCJSZWFjdCIsIl9yZWYiLCJ0eXBlIiwidmFsdWUiLCJodG1sIiwibWFya0FzUmVhZCIsImlkIiwidHlwZVN0eWxlIiwiY3NzIiwic3R5bGVzIiwidXJnZW50IiwiY2xhc3NOYW1lIiwibm9Ob3RpZmljYXRpb25zIiwiZGF0YS1ub3RpZmljYXRpb24tdHlwZSIsIm9uQ2xpY2siLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImRlZmF1bHRQcm9wcyIsIk5hTiIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIl9faHRtbCIsInNjcmVlblNpemUiLCJsaXN0SXRlbVNtYWxsIiwibGlzdFN0eWxlIiwiYm9yZGVyQm90dG9tIiwicGFkZGluZyIsImZvbnRTaXplIiwiU3R5bGVTaGVldCIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJjb2xvciIsImN1cnNvciIsIk5vdGlmaWNhdGlvbnMiLCJfUHVyZUNvbXBvbmVudCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsInByb3BzIiwiX2NsYXNzQ2FsbENoZWNrIiwiY2FsbCIsImtleSIsIl90aGlzJHByb3BzIiwidGhpcyIsImRpc3BsYXlEcmF3ZXIiLCJsaXN0Tm90aWZpY2F0aW9ucyIsImhhbmRsZURpc3BsYXlEcmF3ZXIiLCJoYW5kbGVIaWRlRHJhd2VyIiwibWFya05vdGlmaWNhdGlvbkFzUmVhZCIsIm1lbnVQU3R5bGUiLCJtZW51SXRlbVBOb1Nob3ciLCJtZW51SXRlbVBTaG93IiwibWVudUl0ZW0iLCJub3RpZmljYXRpb25zIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwiYm9yZGVyIiwicG9zaXRpb24iLCJyaWdodCIsImFyaWEtbGFiZWwiLCJzcmMiLCJjbG9zZUljb24iLCJhbHQiLCJub3RpZmljYXRpb25zQnV0dG9uSW1hZ2UiLCJub3RpZmljYXRpb25zUCIsIm5vdGlmaWNhdGlvbnNVTCIsImxlbmd0aCIsIm1hcCIsIm5vdGlmaWNhdGlvbiIsIlB1cmVDb21wb25lbnQiLCJOb3RpZmljYXRpb25JdGVtU2hhcGUiLCJib3JkZXJLZXlmcmFtZXMiLCJjb25jYXQiLCJmbG9hdCIsImJhY2tncm91bmRDb2xvciIsImFuaW1hdGlvbk5hbWUiLCJmcm9tIiwib3BhY2l0eSIsInRvIiwidHJhbnNmb3JtIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsIm1hcmdpblJpZ2h0IiwiZGlzcGxheSIsIm1hcmdpbkJvdHRvbSIsImFuaW1hdGlvbkZpbGxNb2RlIiwiaGVpZ2h0Iiwid2lkdGgiLCJ6SW5kZXgiLCJtYXJnaW4iLCJtYXJnaW5Ub3AiLCJ1c2VyIiwiZW1haWwiLCJwYXNzd29yZCIsImlzTG9nZ2VkSW4iLCJsb2dPdXQiLCJIZWFkZXIiLCJfQ29tcG9uZW50IiwiX3RoaXMkY29udGV4dCIsImNvbnRleHQiLCJoZWFkZXIiLCJob2xiZXJ0b25fbG9nbyIsImhlYWRlckltZyIsImxvZ291dFNlY3Rpb24iLCJsb2dvdXRTZWN0aW9uU3BhbiIsIkNvbXBvbmVudCIsImFsaWduSXRlbXMiLCJwYWRkaW5nUmlnaHQiLCJhbGlnblNlbGYiLCJmb250U3R5bGUiLCJjb250ZXh0VHlwZSIsIkFwcENvbnRleHQiLCJCb2R5U2VjdGlvbiIsImNoaWxkcmVuIiwidGl0bGUiLCJib2R5U2VjdGlvbiIsImJvZHlTZWN0aW9uSDIiLCJmbGV4V3JhcCIsImJveFNpemluZyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ0JvdHRvbSIsIkJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSIsIl9jcmVhdGVDbGFzcyIsImJvZHlTZWN0aW9uV2l0aE1hcmdpbiIsIkxvZ2luIiwiX3RoaXMiLCJzdGF0ZSIsImVuYWJsZVN1Ym1pdCIsImhhbmRsZUxvZ2luU3VibWl0IiwiYmluZCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJoYW5kbGVDaGFuZ2VFbWFpbCIsImhhbmRsZUNoYW5nZVBhc3N3b3JkIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIl90aGlzJHN0YXRlIiwibG9nSW4iLCJ0YXJnZXQiLCJzZXRTdGF0ZSIsImxvZ2luIiwiYWN0aW9uIiwib25TdWJtaXQiLCJodG1sRm9yIiwibmFtZSIsImxvZ2luSW5wdXQiLCJvbkNoYW5nZSIsImRpc2FibGVkIiwiZmxleEdyb3ciLCJtYXJnaW5MZWZ0Iiwicm93U3R5bGVzIiwiaGVhZGVyUm93U3R5bGVzIiwiQ291cnNlTGlzdFJvdyIsImVsZW1lbnQiLCJpc0hlYWRlclN0eWxlIiwiaXNIZWFkZXIiLCJ0ZXh0Rmlyc3RDZWxsIiwidGV4dFNlY29uZENlbGwiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJ1c2VTdGF0ZSIsImlzQ2hlY2tlZCIsInNldElzQ2hlY2tlZCIsInRhYmxlSXRlbVN0eWxlIiwiQ291cnNlTGlzdFRoIiwiQ291cnNlTGlzdFRkIiwicm93Q2hlY2tlZCIsImNvbFNwYW4iLCJDb3Vyc2VMaXN0VGhTcGFuMiIsImNzc1ZhcnMiLCJib3JkZXJUb3AiLCJ0ZXh0QWxpZ24iLCJjcmVkaXQiLCJDb3Vyc2VMaXN0IiwibGlzdENvdXJzZXMiLCJsaXN0IiwiY291cnNlIiwiQ291cnNlU2hhcGUiLCJib3JkZXJDb2xsYXBzZSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImhyZWYiLCJsaXN0Tm90aWZpY2F0aW9uc0luaXRpYWxTdGF0ZSIsImRvY3VtZW50IiwiYm9keSIsIkFwcCIsImhhbmRsZUtleUNvbWJpbmF0aW9uIiwiZSIsImN0cmxLZXkiLCJhbGVydCIsImZpbHRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29udGFpbmVyIiwiYXBwIiwiYXBwQm9keSIsImZvb3RlciIsIkZvb3RlciIsImp1c3RpZnlDb250ZW50IiwiYm90dG9tIl0sIm1hcHBpbmdzIjoiZzBCQUlBLElBQU1BLEVBQW1CQyxRQUFXLFNBQXlCQyxHQU0xRCxJQUxEQyxFQUFJRCxFQUFKQyxLQUNBQyxFQUFLRixFQUFMRSxNQUNBQyxFQUFJSCxFQUFKRyxLQUNBQyxFQUFVSixFQUFWSSxXQUNBQyxFQUFFTCxFQUFGSyxHQUlJQyxHQUFZQyxRQUFhLFdBQVROLEVBQW9CTyxFQUFPQyxPQUFTRCxFQUFNLFNBa0M5RCxPQWhDSU4sRUFDVyxvQkFB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TyxVQU9QOUosR0FBU2tCLFlBQWtCLENBQy9Cb0ssVUFBVyxDQUNUekcsTUFBTyxvQkFDUDZELFdBQVksTUFDWmxFLFlBQWEsT0FHZitHLElBQUssQ0FDSHhLLGFBQWMsYUFBRitDLE9BQWVnRyxLQUc3QjBCLFFBQVMsQ0FDUC9HLFFBQVMsT0FDVGtILGVBQWdCLFVBR2xCRixPLDRIQUFNckssQ0FBQSxDQUNKMkksVUFBVyxhQUFGakcsT0FBZWdHLElBQ3hCakYsTUFBTyxPQUNQSixRQUFTLE9BQ1RrSCxlQUFnQixTQUNoQjNCLFVBQVcsU0FDWGpILFNBQVUsUUFDVitELGNBQWUsT0FDZjhFLE9BQVEsRUFDUnpGLFVBQVcsVUE1Qk4sdUNBNkJlLENBQ2xCcEQsU0FBVSxhQUtoQiIsImZpbGUiOiI2NzcuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuXG5jb25zdCBOb3RpZmljYXRpb25JdGVtID0gUmVhY3QubWVtbyhmdW5jdGlvbiBOb3RpZmljYXRpb25JdGVtKHtcbiAgdHlwZSxcbiAgdmFsdWUsXG4gIGh0bWwsXG4gIG1hcmtBc1JlYWQsXG4gIGlkLFxufSkge1xuICBsZXQgbGlzdEl0ZW07XG5cbiAgbGV0IHR5cGVTdHlsZSA9IGNzcyh0eXBlID09PSBcInVyZ2VudFwiID8gc3R5bGVzLnVyZ2VudCA6IHN0eWxlcy5kZWZhdWx0KTtcblxuICBpZiAodmFsdWUpIHtcbiAgICBpZiAodHlwZSA9PT0gXCJub05vdGlmaWNhdGlvbnNcIikge1xuICAgICAgbGlzdEl0ZW0gPSAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ub05vdGlmaWNhdGlvbnMpfVxuICAgICAgICAgIGRhdGEtbm90aWZpY2F0aW9uLXR5cGU9e3R5cGV9XG4gICAgICAgID5cbiAgICAgICAgICB7dmFsdWV9XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0SXRlbSA9IChcbiAgICAgICAgPGxpXG4gICAgICAgICAgY2xhc3NOYW1lPXt0eXBlU3R5bGV9XG4gICAgICAgICAgZGF0YS1ub3RpZmljYXRpb24tdHlwZT17dHlwZX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBtYXJrQXNSZWFkKGlkKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgPC9saT5cbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxpc3RJdGVtID0gKFxuICAgICAgPGxpXG4gICAgICAgIGNsYXNzTmFtZT17dHlwZVN0eWxlfVxuICAgICAgICBkYXRhLW5vdGlmaWNhdGlvbi10eXBlPXt0eXBlfVxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17aHRtbH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gbWFya0FzUmVhZChpZCl9XG4gICAgICA+PC9saT5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RJdGVtO1xufSk7XG5cbk5vdGlmaWNhdGlvbkl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiBcImRlZmF1bHRcIixcbiAgdmFsdWU6IFwiXCIsXG4gIGh0bWw6IHt9LFxuICBtYXJrQXNSZWFkOiAoKSA9PiB7fSxcbiAgaWQ6IE5hTixcbn07XG5cbk5vdGlmaWNhdGlvbkl0ZW0ucHJvcFR5cGVzID0ge1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaHRtbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBfX2h0bWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0pLFxuICBtYXJrQXNSZWFkOiBQcm9wVHlwZXMuZnVuYyxcbiAgaWQ6IFByb3BUeXBlcy5udW1iZXIsXG59O1xuXG5jb25zdCBzY3JlZW5TaXplID0ge1xuICBzbWFsbDogXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweClcIixcbn07XG5cbmNvbnN0IGxpc3RJdGVtU21hbGwgPSB7XG4gIGxpc3RTdHlsZTogXCJub25lXCIsXG4gIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgYmxhY2tcIixcbiAgcGFkZGluZzogXCIxMHB4IDhweFwiLFxuICBmb250U2l6ZTogXCIyMHB4XCIsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGRlZmF1bHQ6IHtcbiAgICBjb2xvcjogXCJibHVlXCIsXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICB9LFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXTogbGlzdEl0ZW1TbWFsbCxcbiAgfSxcblxuICB1cmdlbnQ6IHtcbiAgICBjb2xvcjogXCJyZWRcIixcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgIH0sXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiBsaXN0SXRlbVNtYWxsLFxuICB9LFxuXG4gIG5vTm90aWZpY2F0aW9uczoge1xuICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiBsaXN0SXRlbVNtYWxsLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbkl0ZW07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNvbnN0IE5vdGlmaWNhdGlvbkl0ZW1TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGh0bWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19odG1sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9KSxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25JdGVtU2hhcGU7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDM1OGJiMzVkYzAxMTY5NWI4NGNlNjdmOTIxNGMyYmYucG5nXCI7IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBOb3RpZmljYXRpb25JdGVtIGZyb20gXCIuL05vdGlmaWNhdGlvbkl0ZW1cIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBOb3RpZmljYXRpb25JdGVtU2hhcGUgZnJvbSBcIi4vTm90aWZpY2F0aW9uSXRlbVNoYXBlXCI7XG5pbXBvcnQgY2xvc2VJY29uIGZyb20gXCIuLi9hc3NldHMvY2xvc2UtaWNvbi5wbmdcIjtcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gXCJhcGhyb2RpdGVcIjtcblxuY2xhc3MgTm90aWZpY2F0aW9ucyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICAvLyB0aGlzLm1hcmtBc1JlYWQgPSB0aGlzLm1hcmtBc1JlYWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgLy8gICByZXR1cm4gKFxuICAvLyAgICAgbmV4dFByb3BzLmxpc3ROb3RpZmljYXRpb25zLmxlbmd0aCA+XG4gIC8vICAgICAgIHRoaXMucHJvcHMubGlzdE5vdGlmaWNhdGlvbnMubGVuZ3RoIHx8XG4gIC8vICAgICBuZXh0UHJvcHMuZGlzcGxheURyYXdlciAhPT0gdGhpcy5wcm9wcy5kaXNwbGF5RHJhd2VyXG4gIC8vICAgKTtcbiAgLy8gfVxuXG4gIC8vIG1hcmtBc1JlYWQoaWQpIHtcbiAgLy8gICBjb25zb2xlLmxvZyhgTm90aWZpY2F0aW9uICR7aWR9IGhhcyBiZWVuIG1hcmtlZCBhcyByZWFkYCk7XG4gIC8vIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgZGlzcGxheURyYXdlcixcbiAgICAgIGxpc3ROb3RpZmljYXRpb25zLFxuICAgICAgaGFuZGxlRGlzcGxheURyYXdlcixcbiAgICAgIGhhbmRsZUhpZGVEcmF3ZXIsXG4gICAgICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbWVudVBTdHlsZSA9IGNzcyhcbiAgICAgIGRpc3BsYXlEcmF3ZXIgPyBzdHlsZXMubWVudUl0ZW1QTm9TaG93IDogc3R5bGVzLm1lbnVJdGVtUFNob3dcbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubWVudUl0ZW0pfVxuICAgICAgICAgIGlkPVwibWVudUl0ZW1cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZURpc3BsYXlEcmF3ZXJ9XG4gICAgICAgID5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e21lbnVQU3R5bGV9PllvdXIgbm90aWZpY2F0aW9uczwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtkaXNwbGF5RHJhd2VyICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ub3RpZmljYXRpb25zKX0gaWQ9XCJOb3RpZmljYXRpb25zXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICByaWdodDogMjAsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjbG9zZVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUhpZGVEcmF3ZXJ9XG4gICAgICAgICAgICAgIGlkPVwiY2xvc2VOb3RpZmljYXRpb25zXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17Y2xvc2VJY29ufVxuICAgICAgICAgICAgICAgIGFsdD1cImNsb3NlLWljb25cIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ub3RpZmljYXRpb25zQnV0dG9uSW1hZ2UpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9e2NzcyhzdHlsZXMubm90aWZpY2F0aW9uc1ApfT5cbiAgICAgICAgICAgICAgSGVyZSBpcyB0aGUgbGlzdCBvZiBub3RpZmljYXRpb25zXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLm5vdGlmaWNhdGlvbnNVTCl9PlxuICAgICAgICAgICAgICB7bGlzdE5vdGlmaWNhdGlvbnMubGVuZ3RoID09PSAwICYmIChcbiAgICAgICAgICAgICAgICA8Tm90aWZpY2F0aW9uSXRlbVxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm5vTm90aWZpY2F0aW9uc1wiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT1cIk5vIG5ldyBub3RpZmljYXRpb25zIGZvciBub3dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAge2xpc3ROb3RpZmljYXRpb25zLm1hcCgobm90aWZpY2F0aW9uKSA9PiAoXG4gICAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbkl0ZW1cbiAgICAgICAgICAgICAgICAgIGtleT17bm90aWZpY2F0aW9uLmlkfVxuICAgICAgICAgICAgICAgICAgaWQ9e25vdGlmaWNhdGlvbi5pZH1cbiAgICAgICAgICAgICAgICAgIHR5cGU9e25vdGlmaWNhdGlvbi50eXBlfVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e25vdGlmaWNhdGlvbi52YWx1ZX1cbiAgICAgICAgICAgICAgICAgIGh0bWw9e25vdGlmaWNhdGlvbi5odG1sfVxuICAgICAgICAgICAgICAgICAgbWFya0FzUmVhZD17bWFya05vdGlmaWNhdGlvbkFzUmVhZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59XG5cbk5vdGlmaWNhdGlvbnMuZGVmYXVsdFByb3BzID0ge1xuICBkaXNwbGF5RHJhd2VyOiBmYWxzZSxcbiAgbGlzdE5vdGlmaWNhdGlvbnM6IFtdLFxuICBoYW5kbGVEaXNwbGF5RHJhd2VyOiAoKSA9PiB7fSxcbiAgaGFuZGxlSGlkZURyYXdlcjogKCkgPT4ge30sXG4gIG1hcmtOb3RpZmljYXRpb25Bc1JlYWQ6ICgpID0+IHt9LFxufTtcblxuTm90aWZpY2F0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIGRpc3BsYXlEcmF3ZXI6IFByb3BUeXBlcy5ib29sLFxuICBsaXN0Tm90aWZpY2F0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoTm90aWZpY2F0aW9uSXRlbVNoYXBlKSxcbiAgaGFuZGxlRGlzcGxheURyYXdlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhbmRsZUhpZGVEcmF3ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmNvbnN0IGNzc1ZhcnMgPSB7XG4gIG1haW5Db2xvcjogXCIjZTAxZDNmXCIsXG59O1xuXG5jb25zdCBzY3JlZW5TaXplID0ge1xuICBzbWFsbDogXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweClcIixcbn07XG5cbmNvbnN0IG9wYWNpdHlLZXlmcmFtZXMgPSB7XG4gIGZyb206IHtcbiAgICBvcGFjaXR5OiAwLjUsXG4gIH0sXG5cbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufTtcblxuY29uc3QgdHJhbnNsYXRlWUtleWZyYW1lcyA9IHtcbiAgXCIwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoMClcIixcbiAgfSxcblxuICBcIjUwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTVweClcIixcbiAgfSxcblxuICBcIjc1JVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoNXB4KVwiLFxuICB9LFxuXG4gIFwiMTAwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoMClcIixcbiAgfSxcbn07XG5cbmNvbnN0IGJvcmRlcktleWZyYW1lcyA9IHtcbiAgXCIwJVwiOiB7XG4gICAgYm9yZGVyOiBgM3B4IGRhc2hlZCBkZWVwU2t5Qmx1ZWAsXG4gIH0sXG5cbiAgXCIxMDAlXCI6IHtcbiAgICBib3JkZXI6IGAzcHggZGFzaGVkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgfSxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgbWVudUl0ZW06IHtcbiAgICBmbG9hdDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCIjZmZmOGY4XCIsXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgIGFuaW1hdGlvbk5hbWU6IFtvcGFjaXR5S2V5ZnJhbWVzLCB0cmFuc2xhdGVZS2V5ZnJhbWVzXSxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIjFzLCAwLjVzXCIsXG4gICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMyxcbiAgICB9LFxuICB9LFxuXG4gIG1lbnVJdGVtUE5vU2hvdzoge1xuICAgIG1hcmdpblJpZ2h0OiBcIjhweFwiLFxuICAgIGRpc3BsYXk6IFwibm9uZVwiLFxuICB9LFxuXG4gIG1lbnVJdGVtUFNob3c6IHtcbiAgICBtYXJnaW5SaWdodDogXCI4cHhcIixcbiAgfSxcblxuICBub3RpZmljYXRpb25zOiB7XG4gICAgZmxvYXQ6IFwicmlnaHRcIixcbiAgICAvLyBib3JkZXI6IGAzcHggZGFzaGVkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgICBwYWRkaW5nOiBcIjEwcHhcIixcbiAgICBtYXJnaW5Cb3R0b206IFwiMjBweFwiLFxuICAgIGFuaW1hdGlvbk5hbWU6IFtib3JkZXJLZXlmcmFtZXNdLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIjAuOHNcIixcbiAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgICBhbmltYXRpb25GaWxsTW9kZTogXCJmb3J3YXJkc1wiLFxuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIGJvcmRlcjogYDNweCBkYXNoZWQgZGVlcFNreUJsdWVgLFxuICAgICAgLy8gYW5pbWF0aW9uRmlsbE1vZGU6IFwiZm9yd2FyZHNcIixcbiAgICB9LFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXToge1xuICAgICAgZmxvYXQ6IFwibm9uZVwiLFxuICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgIGxpc3RTdHlsZTogXCJub25lXCIsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgZm9udFNpemU6IFwiMjBweFwiLFxuICAgICAgXCI6aG92ZXJcIjoge1xuICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAvLyBhbmltYXRpb25GaWxsTW9kZTogXCJmb3J3YXJkc1wiLFxuICAgICAgfSxcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBiYWNrZ3JvdW5kOiBcIndoaXRlXCIsXG4gICAgICBoZWlnaHQ6IFwiMTEwdmhcIixcbiAgICAgIHdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gIH0sXG5cbiAgbm90aWZpY2F0aW9uc0J1dHRvbkltYWdlOiB7XG4gICAgd2lkdGg6IFwiMTBweFwiLFxuICB9LFxuXG4gIG5vdGlmaWNhdGlvbnNQOiB7XG4gICAgbWFyZ2luOiAwLFxuICAgIG1hcmdpblRvcDogXCIxNXB4XCIsXG4gIH0sXG5cbiAgbm90aWZpY2F0aW9uc1VMOiB7XG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9ucztcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNGJhYjVkNjMzZTM2Y2E4ZDE3ZWRjNjMxNjRjZjkzNC5qcGdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjb25zdCB1c2VyID0ge1xuICBlbWFpbDogXCJcIixcbiAgcGFzc3dvcmQ6IFwiXCIsXG4gIGlzTG9nZ2VkSW46IGZhbHNlLFxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ091dCA9ICgpID0+IHt9O1xuXG5jb25zdCBBcHBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7IHVzZXIsIGxvZ091dCB9KTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwQ29udGV4dDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBob2xiZXJ0b25fbG9nbyBmcm9tIFwiLi4vYXNzZXRzL2hvbGJlcnRvbl9sb2dvLmpwZ1wiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuaW1wb3J0IEFwcENvbnRleHQgZnJvbSBcIi4uL0FwcC9BcHBDb250ZXh0XCI7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXNlciwgbG9nT3V0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuaGVhZGVyKX0+XG4gICAgICAgIDxpbWcgc3JjPXtob2xiZXJ0b25fbG9nb30gY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmhlYWRlckltZyl9IC8+XG4gICAgICAgIDxoMT5TY2hvb2wgZGFzaGJvYXJkPC9oMT5cblxuICAgICAgICB7dXNlci5pc0xvZ2dlZEluICYmIChcbiAgICAgICAgICA8cCBpZD1cImxvZ291dFNlY3Rpb25cIiBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9nb3V0U2VjdGlvbil9PlxuICAgICAgICAgICAgV2VsY29tZSA8Yj57YCR7dXNlci5lbWFpbH0gYH08L2I+XG4gICAgICAgICAgICA8c3BhbiBvbkNsaWNrPXtsb2dPdXR9IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sb2dvdXRTZWN0aW9uU3Bhbil9PlxuICAgICAgICAgICAgICAobG9nb3V0KVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgY3NzVmFycyA9IHtcbiAgbWFpbkNvbG9yOiBcIiNlMDFkM2ZcIixcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgaGVhZGVyOiB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBjb2xvcjogY3NzVmFycy5tYWluQ29sb3IsXG4gICAgZm9udFNpemU6IFwiMjBweFwiLFxuICB9LFxuXG4gIGhlYWRlckltZzoge1xuICAgIHdpZHRoOiBcIjIwMHB4XCIsXG4gIH0sXG4gIGxvZ291dFNlY3Rpb246IHtcbiAgICBjb2xvcjogXCJibGFja1wiLFxuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgcmlnaHQ6IDAsXG4gICAgcGFkZGluZ1JpZ2h0OiBcIjIwcHhcIixcbiAgICBhbGlnblNlbGY6IFwiZmxleC1lbmRcIixcbiAgfSxcbiAgbG9nb3V0U2VjdGlvblNwYW46IHtcbiAgICBmb250U3R5bGU6IFwiaXRhbGljXCIsXG4gICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgfSxcbn0pO1xuXG5IZWFkZXIuY29udGV4dFR5cGUgPSBBcHBDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmNsYXNzIEJvZHlTZWN0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgdGl0bGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmJvZHlTZWN0aW9uKX0+XG4gICAgICAgIDxoMiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuYm9keVNlY3Rpb25IMil9Pnt0aXRsZX08L2gyPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkJvZHlTZWN0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGl0bGU6IFwiXCIsXG59O1xuXG5Cb2R5U2VjdGlvbi5wcm9wVHlwZXMgPSB7XG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuY29uc3Qgc2NyZWVuU2l6ZSA9IHtcbiAgc21hbGw6IFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTAwcHgpXCIsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJvZHlTZWN0aW9uOiB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleFdyYXA6IFwid3JhcFwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBbc2NyZWVuU2l6ZS5zbWFsbF06IHtcbiAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICBwYWRkaW5nTGVmdDogXCI1MHB4XCIsXG4gICAgICBwYWRkaW5nUmlnaHQ6IFwiNTBweFwiLFxuICAgICAgcGFkZGluZ0JvdHRvbTogXCIyMHB4XCIsXG4gICAgfSxcbiAgfSxcblxuICBib2R5U2VjdGlvbkgyOiB7XG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEJvZHlTZWN0aW9uO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IEJvZHlTZWN0aW9uIGZyb20gXCIuL0JvZHlTZWN0aW9uXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmNsYXNzIEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ib2R5U2VjdGlvbldpdGhNYXJnaW4pfT5cbiAgICAgICAgPEJvZHlTZWN0aW9uIHsuLi50aGlzLnByb3BzfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20uZGVmYXVsdFByb3BzID0ge1xuICB0aXRsZTogXCJcIixcbn07XG5cbkJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbS5wcm9wVHlwZXMgPSB7XG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuY29uc3Qgc2NyZWVuU2l6ZSA9IHtcbiAgc21hbGw6IFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTAwcHgpXCIsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJvZHlTZWN0aW9uV2l0aE1hcmdpbjoge1xuICAgIG1hcmdpbkJvdHRvbTogXCI0MHB4XCIsXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXToge1xuICAgICAgbWFyZ2luQm90dG9tOiBcIjEwcHhcIixcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gXCJhcGhyb2RpdGVcIjtcblxuY2xhc3MgTG9naW4gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZW1haWw6IFwiXCIsXG4gICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgIGVuYWJsZVN1Ym1pdDogZmFsc2UsXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUxvZ2luU3VibWl0ID0gdGhpcy5oYW5kbGVMb2dpblN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlRW1haWwgPSB0aGlzLmhhbmRsZUNoYW5nZUVtYWlsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VQYXNzd29yZCA9IHRoaXMuaGFuZGxlQ2hhbmdlUGFzc3dvcmQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUxvZ2luU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgdGhpcy5wcm9wcy5sb2dJbihlbWFpbCwgcGFzc3dvcmQpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlRW1haWwoZXZlbnQpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgeyBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmICh2YWx1ZSAhPT0gXCJcIiAmJiBwYXNzd29yZCAhPT0gXCJcIikgdGhpcy5zZXRTdGF0ZSh7IGVuYWJsZVN1Ym1pdDogdHJ1ZSB9KTtcbiAgICBlbHNlIHRoaXMuc2V0U3RhdGUoeyBlbmFibGVTdWJtaXQ6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVtYWlsOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2VQYXNzd29yZChldmVudCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCB7IGVtYWlsIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGVtYWlsICE9PSBcIlwiICYmIHZhbHVlICE9PSBcIlwiKSB0aGlzLnNldFN0YXRlKHsgZW5hYmxlU3VibWl0OiB0cnVlIH0pO1xuICAgIGVsc2UgdGhpcy5zZXRTdGF0ZSh7IGVuYWJsZVN1Ym1pdDogZmFsc2UgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgcGFzc3dvcmQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW4pfT5cbiAgICAgICAgPHA+TG9naW4gdG8gYWNjZXNzIHRoZSBmdWxsIGRhc2hib2FyZDwvcD5cbiAgICAgICAgPGZvcm0gYWN0aW9uPVwiXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlTG9naW5TdWJtaXR9PlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZW1haWxcIj5FbWFpbDo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIGlkPVwiZW1haWxcIlxuICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sb2dpbklucHV0KX1cbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlRW1haWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkXCI+UGFzc3dvcmQ6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBpZD1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW5JbnB1dCl9XG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYXNzd29yZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZVBhc3N3b3JkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17IXRoaXMuc3RhdGUuZW5hYmxlU3VibWl0fSAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHNjcmVlblNpemUgPSB7XG4gIHNtYWxsOiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KVwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBsb2dpbjoge1xuICAgIG1hcmdpbjogXCI1MHB4XCIsXG4gICAgZmxleEdyb3c6IDEsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBtYXJnaW5Ub3A6IFwiMTBweFwiLFxuICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgIG1hcmdpblJpZ2h0OiAwLFxuICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgIH0sXG4gIH0sXG5cbiAgbG9naW5JbnB1dDoge1xuICAgIG1hcmdpbkxlZnQ6IFwiMTBweFwiLFxuICAgIG1hcmdpblJpZ2h0OiBcIjIwcHhcIixcbiAgICBbc2NyZWVuU2l6ZS5zbWFsbF06IHtcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICBtYXJnaW5Ub3A6IFwiMTBweFwiLFxuICAgICAgbWFyZ2luQm90dG9tOiBcIjEwcHhcIixcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmNvbnN0IHJvd1N0eWxlcyA9IHsgYmFja2dyb3VuZENvbG9yOiBcIiNmNWY1ZjVhYlwiIH07XG5jb25zdCBoZWFkZXJSb3dTdHlsZXMgPSB7IGJhY2tncm91bmRDb2xvcjogXCIjZGViNWI1NDVcIiB9O1xuXG5mdW5jdGlvbiBDb3Vyc2VMaXN0Um93KHsgaXNIZWFkZXIsIHRleHRGaXJzdENlbGwsIHRleHRTZWNvbmRDZWxsIH0pIHtcbiAgY29uc3QgW2lzQ2hlY2tlZCwgc2V0SXNDaGVja2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBoYW5kbGVDaGVja2JveCA9ICgpID0+IHtcbiAgICBzZXRJc0NoZWNrZWQoIWlzQ2hlY2tlZCk7XG4gIH07XG5cbiAgbGV0IGVsZW1lbnQ7XG5cbiAgY29uc3QgdGFibGVJdGVtU3R5bGUgPSBjc3MoXG4gICAgaXNIZWFkZXIgPyBzdHlsZXMuQ291cnNlTGlzdFRoIDogc3R5bGVzLkNvdXJzZUxpc3RUZCxcbiAgICBpc0NoZWNrZWQgJiYgc3R5bGVzLnJvd0NoZWNrZWRcbiAgKTtcblxuICBpZiAoaXNIZWFkZXIgPT09IHRydWUpIHtcbiAgICAvL1xuICAgIGlmICh0ZXh0U2Vjb25kQ2VsbCA9PT0gbnVsbCkge1xuICAgICAgZWxlbWVudCA9IChcbiAgICAgICAgPHRoIGNvbFNwYW49XCIyXCIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLkNvdXJzZUxpc3RUaFNwYW4yKX0+XG4gICAgICAgICAge3RleHRGaXJzdENlbGx9XG4gICAgICAgIDwvdGg+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50ID0gKFxuICAgICAgICA8PlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9e3RhYmxlSXRlbVN0eWxlfT57dGV4dEZpcnN0Q2VsbH08L3RoPlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9e3RhYmxlSXRlbVN0eWxlfT57dGV4dFNlY29uZENlbGx9PC90aD5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICAvL1xuICB9IGVsc2UgaWYgKGlzSGVhZGVyID09PSBmYWxzZSkge1xuICAgIGVsZW1lbnQgPSAoXG4gICAgICA8PlxuICAgICAgICA8dGQgY2xhc3NOYW1lPXt0YWJsZUl0ZW1TdHlsZX0+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG9uQ2xpY2s9e2hhbmRsZUNoZWNrYm94fT48L2lucHV0PlxuICAgICAgICAgIHt0ZXh0Rmlyc3RDZWxsfVxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPXt0YWJsZUl0ZW1TdHlsZX0+e3RleHRTZWNvbmRDZWxsfTwvdGQ+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgbGV0IGlzSGVhZGVyU3R5bGU7XG5cbiAgaWYgKGlzSGVhZGVyKSBpc0hlYWRlclN0eWxlID0gaGVhZGVyUm93U3R5bGVzO1xuICBlbHNlIGlzSGVhZGVyU3R5bGUgPSByb3dTdHlsZXM7XG5cbiAgcmV0dXJuIDx0ciBzdHlsZT17aXNIZWFkZXJTdHlsZX0+e2VsZW1lbnR9PC90cj47XG59XG5cbkNvdXJzZUxpc3RSb3cuZGVmYXVsdFByb3BzID0ge1xuICBpc0hlYWRlcjogZmFsc2UsXG4gIHRleHRTZWNvbmRDZWxsOiBudWxsLFxufTtcblxuQ291cnNlTGlzdFJvdy5wcm9wVHlwZXMgPSB7XG4gIGlzSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dEZpcnN0Q2VsbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0ZXh0U2Vjb25kQ2VsbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxufTtcblxuY29uc3QgY3NzVmFycyA9IHtcbiAgYm9yZGVyVGFibGVDb2xvcjogXCJyZ2IoMTcwLCAxNzAsIDE3MCk7XCIsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIENvdXJzZUxpc3RUaDoge1xuICAgIGJvcmRlclRvcDogYDFweCBzb2xpZCAke2Nzc1ZhcnMuYm9yZGVyVGFibGVDb2xvcn1gLFxuICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke2Nzc1ZhcnMuYm9yZGVyVGFibGVDb2xvcn1gLFxuICAgIHRleHRBbGlnbjogXCJsZWZ0XCIsXG4gICAgZm9udFNpemU6IFwiMThweFwiLFxuICB9LFxuXG4gIENvdXJzZUxpc3RUaFNwYW4yOiB7XG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICB9LFxuXG4gIENvdXJzZUxpc3RUZDoge1xuICAgIHRleHRBbGlnbjogXCJsZWZ0XCIsXG4gIH0sXG5cbiAgcm93Q2hlY2tlZDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCIjZTZlNGU0XCIsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ291cnNlTGlzdFJvdztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuY29uc3QgQ291cnNlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBpZDogUHJvcFR5cGVzLm51bWJlcixcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY3JlZGl0OiBQcm9wVHlwZXMubnVtYmVyLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvdXJzZVNoYXBlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IENvdXJzZUxpc3RSb3cgZnJvbSBcIi4vQ291cnNlTGlzdFJvd1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IENvdXJzZVNoYXBlIGZyb20gXCIuL0NvdXJzZVNoYXBlXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmZ1bmN0aW9uIENvdXJzZUxpc3QoeyBsaXN0Q291cnNlcyB9KSB7XG4gIHJldHVybiAoXG4gICAgPHRhYmxlIGlkPVwiQ291cnNlTGlzdFwiIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5saXN0KX0+XG4gICAgICA8dGhlYWQ+XG4gICAgICAgIDxDb3Vyc2VMaXN0Um93IHRleHRGaXJzdENlbGw9XCJBdmFpbGFibGUgY291cnNlc1wiIGlzSGVhZGVyPXt0cnVlfSAvPlxuICAgICAgICA8Q291cnNlTGlzdFJvd1xuICAgICAgICAgIHRleHRGaXJzdENlbGw9XCJDb3Vyc2UgbmFtZVwiXG4gICAgICAgICAgdGV4dFNlY29uZENlbGw9XCJDcmVkaXRcIlxuICAgICAgICAgIGlzSGVhZGVyPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge2xpc3RDb3Vyc2VzLmxlbmd0aCA9PT0gMCAmJiAoXG4gICAgICAgICAgPENvdXJzZUxpc3RSb3dcbiAgICAgICAgICAgIHRleHRGaXJzdENlbGw9XCJObyBjb3Vyc2UgYXZhaWxhYmxlIHlldFwiXG4gICAgICAgICAgICBpc0hlYWRlcj17ZmFsc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cblxuICAgICAgICB7bGlzdENvdXJzZXMubWFwKChjb3Vyc2UpID0+IChcbiAgICAgICAgICA8Q291cnNlTGlzdFJvd1xuICAgICAgICAgICAga2V5PXtjb3Vyc2UuaWR9XG4gICAgICAgICAgICB0ZXh0Rmlyc3RDZWxsPXtjb3Vyc2UubmFtZX1cbiAgICAgICAgICAgIHRleHRTZWNvbmRDZWxsPXtjb3Vyc2UuY3JlZGl0fVxuICAgICAgICAgICAgaXNIZWFkZXI9e2ZhbHNlfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICApO1xufVxuXG5Db3Vyc2VMaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgbGlzdENvdXJzZXM6IFtdLFxufTtcblxuQ291cnNlTGlzdC5wcm9wVHlwZXMgPSB7XG4gIGxpc3RDb3Vyc2VzOiBQcm9wVHlwZXMuYXJyYXlPZihDb3Vyc2VTaGFwZSksXG59O1xuXG5jb25zdCBjc3NWYXJzID0ge1xuICBib3JkZXJUYWJsZUNvbG9yOiBcInJnYigxNzAsIDE3MCwgMTcwKTtcIixcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgbGlzdDoge1xuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2Nzc1ZhcnMuYm9yZGVyVGFibGVDb2xvcn1gLFxuICAgIGJvcmRlckNvbGxhcHNlOiBcImNvbGxhcHNlXCIsXG4gICAgd2lkdGg6IFwiOTUlXCIsXG4gICAgbWFyZ2luOiBcIjQwcHggYXV0byAwIGF1dG9cIixcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDb3Vyc2VMaXN0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZ2V0RnVsbFllYXIsIGdldEZvb3RlckNvcHkgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCBBcHBDb250ZXh0IGZyb20gXCIuLi9BcHAvQXBwQ29udGV4dFwiO1xuXG5mdW5jdGlvbiBGb290ZXIoKSB7XG4gIHJldHVybiAoXG4gICAgPEFwcENvbnRleHQuQ29uc3VtZXI+XG4gICAgICB7KGNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3RlclwiPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIENvcHlyaWdodCB7Z2V0RnVsbFllYXIoKX0gLSB7Z2V0Rm9vdGVyQ29weSh0cnVlKX1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIHtjb250ZXh0LnVzZXIuaXNMb2dnZWRJbiAmJiA8YSBocmVmPVwiI1wiPkNvbnRhY3QgdXM8L2E+fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L0FwcENvbnRleHQuQ29uc3VtZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RlcjtcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRGdWxsWWVhcigpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvb3RlckNvcHkoaXNJbmRleCkge1xuICBsZXQgbXNnO1xuXG4gIGlmIChpc0luZGV4KSB7XG4gICAgbXNnID0gXCJIb2xiZXJ0b24gU2Nob29sXCI7XG4gIH0gZWxzZSB7XG4gICAgbXNnID0gXCJIb2xiZXJ0b24gU2Nob29sIG1haW4gZGFzaGJvYXJkXCI7XG4gIH1cblxuICByZXR1cm4gbXNnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGF0ZXN0Tm90aWZpY2F0aW9uKCkge1xuICByZXR1cm4gXCI8c3Ryb25nPlVyZ2VudCByZXF1aXJlbWVudDwvc3Ryb25nPiAtIGNvbXBsZXRlIGJ5IEVPRFwiO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbnMgZnJvbSBcIi4uL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uc1wiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vSGVhZGVyL0hlYWRlclwiO1xuaW1wb3J0IEJvZHlTZWN0aW9uIGZyb20gXCIuLi9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvblwiO1xuaW1wb3J0IEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSBmcm9tIFwiLi4vQm9keVNlY3Rpb24vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tXCI7XG5pbXBvcnQgTG9naW4gZnJvbSBcIi4uL0xvZ2luL0xvZ2luXCI7XG5pbXBvcnQgQ291cnNlTGlzdCBmcm9tIFwiLi4vQ291cnNlTGlzdC9Db3Vyc2VMaXN0XCI7XG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuLi9Gb290ZXIvRm9vdGVyXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBnZXRMYXRlc3ROb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gXCJhcGhyb2RpdGVcIjtcbmltcG9ydCB7IHVzZXIsIGxvZ091dCB9IGZyb20gXCIuL0FwcENvbnRleHRcIjtcbmltcG9ydCBBcHBDb250ZXh0IGZyb20gXCIuL0FwcENvbnRleHRcIjtcblxuY29uc3QgbGlzdENvdXJzZXMgPSBbXG4gIHsgaWQ6IDEsIG5hbWU6IFwiRVM2XCIsIGNyZWRpdDogNjAgfSxcbiAgeyBpZDogMiwgbmFtZTogXCJXZWJwYWNrXCIsIGNyZWRpdDogMjAgfSxcbiAgeyBpZDogMywgbmFtZTogXCJSZWFjdFwiLCBjcmVkaXQ6IDQwIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgbGlzdE5vdGlmaWNhdGlvbnNJbml0aWFsU3RhdGUgPSBbXG4gIHsgaWQ6IDEsIHR5cGU6IFwiZGVmYXVsdFwiLCB2YWx1ZTogXCJOZXcgY291cnNlIGF2YWlsYWJsZVwiIH0sXG4gIHsgaWQ6IDIsIHR5cGU6IFwidXJnZW50XCIsIHZhbHVlOiBcIk5ldyByZXN1bWUgYXZhaWxhYmxlXCIgfSxcbiAgeyBpZDogMywgdHlwZTogXCJ1cmdlbnRcIiwgaHRtbDogeyBfX2h0bWw6IGdldExhdGVzdE5vdGlmaWNhdGlvbigpIH0gfSxcbl07XG5cbmRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gMDtcblxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5oYW5kbGVLZXlDb21iaW5hdGlvbiA9IHRoaXMuaGFuZGxlS2V5Q29tYmluYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZURpc3BsYXlEcmF3ZXIgPSB0aGlzLmhhbmRsZURpc3BsYXlEcmF3ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUhpZGVEcmF3ZXIgPSB0aGlzLmhhbmRsZUhpZGVEcmF3ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvZ0luID0gdGhpcy5sb2dJbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9nT3V0ID0gdGhpcy5sb2dPdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm1hcmtOb3RpZmljYXRpb25Bc1JlYWQgPSB0aGlzLm1hcmtOb3RpZmljYXRpb25Bc1JlYWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGlzcGxheURyYXdlcjogZmFsc2UsXG4gICAgICB1c2VyLFxuICAgICAgbG9nT3V0OiB0aGlzLmxvZ091dCxcbiAgICAgIGxpc3ROb3RpZmljYXRpb25zOiBsaXN0Tm90aWZpY2F0aW9uc0luaXRpYWxTdGF0ZSxcbiAgICB9O1xuICB9XG5cbiAgaGFuZGxlS2V5Q29tYmluYXRpb24oZSkge1xuICAgIGlmIChlLmtleSA9PT0gXCJoXCIgJiYgZS5jdHJsS2V5KSB7XG4gICAgICBhbGVydChcIkxvZ2dpbmcgeW91IG91dFwiKTtcbiAgICAgIHRoaXMuc3RhdGUubG9nT3V0KCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRGlzcGxheURyYXdlcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlzcGxheURyYXdlcjogdHJ1ZSB9KTtcbiAgfVxuXG4gIGhhbmRsZUhpZGVEcmF3ZXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpc3BsYXlEcmF3ZXI6IGZhbHNlIH0pO1xuICB9XG5cbiAgbG9nSW4oZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgaXNMb2dnZWRJbjogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBsb2dPdXQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHVzZXIgfSk7XG4gIH1cblxuICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkKGlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsaXN0Tm90aWZpY2F0aW9uczogdGhpcy5zdGF0ZS5saXN0Tm90aWZpY2F0aW9ucy5maWx0ZXIoKG5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gbm90aWZpY2F0aW9uLmlkICE9PSBpZDtcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVLZXlDb21iaW5hdGlvbik7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmhhbmRsZUtleUNvbWJpbmF0aW9uKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgdXNlcjogeyBpc0xvZ2dlZEluIH0sXG4gICAgICBsb2dPdXQsXG4gICAgICBkaXNwbGF5RHJhd2VyLFxuICAgICAgbGlzdE5vdGlmaWNhdGlvbnMsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCB2YWx1ZSA9IHsgdXNlciwgbG9nT3V0IH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwcENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT5cbiAgICAgICAgPE5vdGlmaWNhdGlvbnNcbiAgICAgICAgICBsaXN0Tm90aWZpY2F0aW9ucz17bGlzdE5vdGlmaWNhdGlvbnN9XG4gICAgICAgICAgZGlzcGxheURyYXdlcj17ZGlzcGxheURyYXdlcn1cbiAgICAgICAgICBoYW5kbGVEaXNwbGF5RHJhd2VyPXt0aGlzLmhhbmRsZURpc3BsYXlEcmF3ZXJ9XG4gICAgICAgICAgaGFuZGxlSGlkZURyYXdlcj17dGhpcy5oYW5kbGVIaWRlRHJhd2VyfVxuICAgICAgICAgIG1hcmtOb3RpZmljYXRpb25Bc1JlYWQ9e3RoaXMubWFya05vdGlmaWNhdGlvbkFzUmVhZH1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuY29udGFpbmVyKX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuYXBwKX0+XG4gICAgICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuYXBwQm9keSl9PlxuICAgICAgICAgICAgeyFpc0xvZ2dlZEluID8gKFxuICAgICAgICAgICAgICA8Qm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tIHRpdGxlPVwiTG9nIGluIHRvIGNvbnRpbnVlXCI+XG4gICAgICAgICAgICAgICAgPExvZ2luIGxvZ0luPXt0aGlzLmxvZ0lufSAvPlxuICAgICAgICAgICAgICA8L0JvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbT5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20gdGl0bGU9XCJDb3Vyc2UgbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxDb3Vyc2VMaXN0IGxpc3RDb3Vyc2VzPXtsaXN0Q291cnNlc30gLz5cbiAgICAgICAgICAgICAgPC9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxCb2R5U2VjdGlvbiB0aXRsZT1cIk5ld3MgZnJvbSB0aGUgU2Nob29sXCI+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZ1xuICAgICAgICAgICAgICBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dFxuICAgICAgICAgICAgICBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZlxuICAgICAgICAgICAgICB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzXG4gICAgICAgICAgICAgIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvXG4gICAgICAgICAgICAgIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhc1xuICAgICAgICAgICAgICBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHNcbiAgICAgICAgICAgICAgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wXG4gICAgICAgICAgICAgIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mXG4gICAgICAgICAgICAgIExvcmVtIElwc3VtLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvQm9keVNlY3Rpb24+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5mb290ZXIpfT5cbiAgICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0FwcENvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5BcHAuZGVmYXVsdFByb3BzID0ge307XG5cbkFwcC5wcm9wVHlwZXMgPSB7fTtcblxuY29uc3QgY3NzVmFycyA9IHtcbiAgbWFpbkNvbG9yOiBcIiNlMDFkM2ZcIixcbn07XG5cbmNvbnN0IHNjcmVlblNpemUgPSB7XG4gIHNtYWxsOiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KVwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICB3aWR0aDogXCJjYWxjKDEwMCUgLSAxNnB4KVwiLFxuICAgIG1hcmdpbkxlZnQ6IFwiOHB4XCIsXG4gICAgbWFyZ2luUmlnaHQ6IFwiOHB4XCIsXG4gIH0sXG5cbiAgYXBwOiB7XG4gICAgYm9yZGVyQm90dG9tOiBgM3B4IHNvbGlkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgfSxcblxuICBhcHBCb2R5OiB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gIH0sXG5cbiAgZm9vdGVyOiB7XG4gICAgYm9yZGVyVG9wOiBgM3B4IHNvbGlkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgcGFkZGluZ0JvdHRvbTogXCIxMHB4XCIsXG4gICAgYm90dG9tOiAwLFxuICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIixcbiAgICBbc2NyZWVuU2l6ZS5zbWFsbF06IHtcbiAgICAgIHBvc2l0aW9uOiBcInN0YXRpY1wiLFxuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==